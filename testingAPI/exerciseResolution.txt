ddt.json
-------------------------------------------
{
  "environment":{
    "protocol":"http://",
    "hostname":"localhost",
    "port":":8080/"
  },
  "userData":{
    "name":"yourName",
    "age":35,
    "salary":123456,
    "ageUpdate":77,
    "deleteId":1
  }
}
endPoint.json
-------------------------------------------
{
  "user":"SpringBootRestApi/api/user/",
  "userById":"SpringBootRestApi/api/user/{id}"
}

Gerenal
-------------------------------------------
let chakram = require('chakram');
let expect = chakram.expect;
endPoint = require('../data/endPoint.json');
ddt = require('../data/ddt.json');

function createUser() {
    let users = ddt.environment.protocol + ddt.environment.hostname + ddt.environment.port + endPoint.user;
    return users;
}
function userById(id) {
    let usersID = ddt.environment.protocol + ddt.environment.hostname + ddt.environment.port + endPoint.userById;
    usersID = usersID.replace("{id}", id);
    return usersID;
}

GET
-------------------------------------------
    it("User by ID", function () {
        let userID = userById(1);
        return chakram.get(userID)
            .then(function (response) {
                expect(response).to.have.schema(schemaGetById);
            })
    });

Post
-------------------------------------------
let schemaCreateUser = {
    name: "",
    age: "",
    salary: ""
};

    it("Create a User with an existing name", function () {
        schemaCreateUser.name = ddt.userData.name;
        schemaCreateUser.age = ddt.userData.age;
        schemaCreateUser.salary = ddt.userData.salary;
        return chakram.post(createUser(), schemaCreateUser)
            .then(function (response) {
                expect(response.response.statusCode).to.equal(409);
                expect(response.response.body.errorMessage).to.equal("Unable to create. A User with name "+ddt.userData.name+" already" +
                    " exist.");
            })
    });

Put
-------------------------------------------
    it("Update Age", function () {
        schemaCreateUser.name = userIdInformation.name;
        schemaCreateUser.age = ddt.userData.ageUpdate;
        schemaCreateUser.salary = userIdInformation.salary;
        return chakram.put(userById(userIdToSearch),schemaCreateUser)
            .then(function (response) {
                console.log(response.body);
                expect(response.body.id).to.equal(userIdToSearch);
                expect(response.body.name).to.equal(userIdInformation.name);
                expect(response.body.age).to.equal(ddt.userData.ageUpdate);
                expect(response.body.salary).to.equal(userIdInformation.salary);
            })
    });

Delete
-------------------------------------------
describe("Delete", function () {

    it("Delete by Id", function () {
        let userID = deleteUserById(ddt.userData.deleteId);
        return chakram.delete(userID)
            .then(function (response) {
                expect(response.response.statusCode).to.equal(204);
                return chakram.get(userID)
                    .then(function (response) {
                        expect(response.response.body.errorMessage).to.equal("User with id "+ddt.userData.deleteId+" not found");
                    })
            })
    });
    it("All User", function () {
        return chakram.delete(deleteAllUser())
            .then(function (response) {
                expect(response.response.statusCode).to.equal(204);
                return chakram.get(deleteAllUser())
                    .then(function (response) {
                        expect(response.response.statusCode).to.equal(204);
                    })
            })
    });
});

